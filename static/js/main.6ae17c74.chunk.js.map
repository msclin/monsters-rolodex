{"version":3,"sources":["components/card/card.js","components/card-list/card-list.js","components/search-box/search-box.js","App.js","serviceWorker.js","index.js"],"names":["Card","email","id","name","className","alt","src","CardList","monsters","map","monster","key","SearchBox","handleChange","placeholder","onChange","type","App","event","setState","searchQuery","target","value","state","fetch","response","json","this","filter","toLowerCase","includes","filterMonsters","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"uWAYeA,G,YARF,SAAC,GAAD,IAAGC,EAAH,EAAGA,MAAOC,EAAV,EAAUA,GAAIC,EAAd,EAAcA,KAAd,OACX,yBAAKC,UAAU,kBACb,yBAAKC,IAAI,UAAUC,IAAG,+BAA4BJ,EAA5B,eACtB,4BAAMC,GACN,4BAAMF,MCMKM,G,MARE,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SAClB,OACE,yBAAKJ,UAAU,aACXI,EAASC,KAAI,SAAAC,GAAO,OAAI,kBAAC,EAAD,eAAMC,IAAMD,EAAQR,IAAUQ,UCG/CE,G,MARG,SAAC,GAAD,IAAGC,EAAH,EAAGA,aAAcC,EAAjB,EAAiBA,YAAjB,OAChB,2BACEV,UAAU,SACVW,SAAWF,EACXC,YAAcA,EACdE,KAAK,aCqCMC,E,kDAvCb,aAAe,IAAD,8BACZ,gBAqBFJ,aAAe,SAAAK,GACb,EAAKC,SAAS,CAAEC,YAAaF,EAAMG,OAAOC,SApB1C,EAAKC,MAAQ,CACXf,SAAU,GACVY,YAAa,IALH,E,kMAUWI,MAAM,8C,cAAvBC,E,gBACiBA,EAASC,O,OAA1BlB,E,OAENmB,KAAKR,SAAS,CAAEX,a,6IAGA,IAAD,EACmBmB,KAAKJ,MAA/Bf,EADO,EACPA,SAAUY,EADH,EACGA,YAElB,OAAOZ,EAASoB,QAAO,SAAAlB,GAAO,OAAIA,EAAQP,KAAK0B,cAAcC,SAASV,EAAYS,oB,+BAQlF,OACE,yBAAKzB,UAAU,OACb,gDACA,kBAAC,EAAD,CACES,aAAec,KAAKd,aACpBC,YAAY,oBACd,kBAAC,EAAD,CAAUN,SAAWmB,KAAKI,wB,GAlChBC,aCMEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.6ae17c74.chunk.js","sourcesContent":["import React from 'react';\n\nimport './card.css';\n\nconst Card = ({ email, id, name }) => (\n  <div className='card-container'>\n    <img alt='monster' src={ `https://robohash.org/${ id }?set=set2` }/>\n    <h1>{ name }</h1>\n    <h2>{ email }</h2>\n  </div>\n);\n\nexport default Card;","import React from 'react';\n\nimport Card from '../card/card';\n\nimport './card-list.css';\n\nconst CardList = ({ monsters }) => {\n  return (\n    <div className='card-list'>\n      { monsters.map(monster => <Card key={ monster.id } { ...monster }/>) }\n    </div>\n    );\n};\n\nexport default CardList;","import React from 'react';\n\nimport './search-box.css';\n\nconst SearchBox = ({ handleChange, placeholder }) => (\n  <input\n    className='search'\n    onChange={ handleChange }\n    placeholder={ placeholder }\n    type='search'/>\n);\n\nexport default SearchBox;","import React, { Component } from 'react';\n\nimport './App.css';\nimport CardList from './components/card-list/card-list';\nimport SearchBox from './components/search-box/search-box';\n\nclass App extends Component {\n  constructor() {\n    super();\n\n    this.state = {\n      monsters: [],\n      searchQuery: ''\n    }\n  }\n\n  async componentDidMount() {\n    const response = await fetch('https://jsonplaceholder.typicode.com/users');\n    const monsters = await response.json();\n\n    this.setState({ monsters });\n  }\n\n  filterMonsters() {\n    const { monsters, searchQuery } = this.state;\n\n    return monsters.filter(monster => monster.name.toLowerCase().includes(searchQuery.toLowerCase()));\n  }\n\n  handleChange = event => {\n    this.setState({ searchQuery: event.target.value });\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <h1>Monsters Rolodex</h1>\n        <SearchBox\n          handleChange={ this.handleChange }\n          placeholder='search monsters'/>\n        <CardList monsters={ this.filterMonsters() }/>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App/>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}